package com.JavaGit.Basics.Graphs;

import java.util.*;

public class AdjacencyList_BFS_DFS {
    public static int nodes = 6;

    public void addEdge(ArrayList<ArrayList<Integer>> adj, int u, int v){
        adj.get(u).add(v);
        adj.get(v).add(u);
        return;
    }

    public void BFSGraph(ArrayList<ArrayList<Integer>> adj){
        Queue<Integer> q = new LinkedList<Integer>();
        boolean visited[] = new boolean[6];
        System.out.println("BFS Algorithm:");
        visited[0] = true;
        q.add(0);
        while (q.peek() != null){
            int element = q.peek();
            System.out.print(" "+ element);
            q.poll();
            for(int x : adj.get(element)){
                if(visited[x] != true){
                    q.add(x);
                    visited[x] = true;
                }
            }
        }
        return;
    }
    public void BFSRecursive(ArrayList<ArrayList<Integer>> adj,Queue<Integer> q, boolean[] visited){
        if(q.isEmpty()) return;

        int element = q.poll();
        if(visited[element])
            System.out.print(" " + element);
        Iterator<Integer> it = adj.get(element).listIterator();
        while(it.hasNext()){
            int val = it.next();
            if(!visited[val]){
                q.add(val);
                visited[val] = true;
            }

        }
        BFSRecursive(adj, q, visited);

    }

    public void DFSGraph(ArrayList<ArrayList<Integer>> adj){
        Stack<Integer> stk = new Stack();
        System.out.println("\nDFS Algorithm : ");
        boolean visited[] = new boolean[6];
        visited[0] = true;
        stk.push(0);

        while(stk.empty() == false){
            int element = stk.peek();
            stk.pop();
            System.out.print(" "+ element);
            Iterator<Integer> it = adj.get(element).iterator();
            while(it.hasNext()){
                int v = it.next();
                if(visited[v] == false){
                    stk.push(v);
                    visited[v] = true;
                }
            }

        }

    }

    public void DFSRecursive(boolean[] visited,ArrayList<ArrayList<Integer>> graph, int u){
        visited[u] = true;
        System.out.print(" " + u);
        ArrayList<Integer> joint_nodes = graph.get(u);
        Iterator<Integer> it = joint_nodes.iterator();
        while(it.hasNext()){
            int new_node = it.next();
            if(!visited[new_node])
                DFSRecursive(visited,graph,new_node);
        }
        return;
    }

    public void printGraph(ArrayList<ArrayList<Integer>> adj){
        int count=0;

        for (ArrayList<Integer> x : adj){
            System.out.print(count);
            for( int element : x){
                System.out.print("-->"+element);
            }
            System.out.print("\n");
            ++count;
        }
    }
    public static void main(String[] args){
        AdjacencyList_BFS_DFS graph = new AdjacencyList_BFS_DFS();
       ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>();

        for (int i = 0; i < nodes; i++)
            adj.add(new ArrayList<Integer>());


        graph.addEdge(adj, 0, 1);
        graph.addEdge(adj, 0, 2);
        graph.addEdge(adj, 1, 3);
        graph.addEdge(adj, 3, 0);
        graph.addEdge(adj, 3, 2);
        graph.addEdge(adj, 4, 5);

        graph.printGraph(adj);

        graph.BFSGraph(adj);
        System.out.println("\nBFS Recursive: ");
        boolean[] discovered = new boolean[6];
        Queue<Integer> que = new ArrayDeque<>();
        for(int i = 0; i < 6; i++){
            if(!discovered[i]){
                que.add(i);
                graph.BFSRecursive(adj, que, discovered);
            }
        }

        graph.DFSGraph(adj);
        System.out.println("\nDFS Recursive: ");
        boolean[] visited = new boolean[6];
        graph.DFSRecursive(visited, adj, 0);

    }
}

0-->1-->2-->3
1-->0-->3
2-->0-->3
3-->1-->0-->2
4-->5
5-->4
BFS Algorithm:
 0 1 2 3
BFS Recursive: 
 1 2 3 0 5 4
DFS Algorithm : 
 0 3 2 1
DFS Recursive: 
 0 1 3 2
Process finished with exit code 0

