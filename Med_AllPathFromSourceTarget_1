All Paths From Source to Target
Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1, and return them in any order.
The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

class Solution {
    
    public void dfs(int[][] graph, int u, List<List<Integer>> result, List<Integer> path){
        path.add(u);
        if(u == graph.length-1)
            result.add(new ArrayList(path));
        else{
            for(int x : graph[u]){
                dfs(graph, x, result, path);
            }
        }
        path.remove(path.size() - 1);
   
    }
    
    
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> result = new ArrayList();
        System.out.println(result);
        List<Integer> path = new ArrayList();
        dfs(graph, 0, result, path);
        
        return result;
    }
}
