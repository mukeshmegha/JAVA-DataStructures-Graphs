In a town, there are N people labelled from 1 to N.  There is a rumor that one of these people is secretly the town judge.
If the town judge exists, then:
The town judge trusts nobody.
Everybody (except for the town judge) trusts the town judge.
There is exactly one person that satisfies properties 1 and 2.
You are given trust, an array of pairs trust[i] = [a, b] representing that the person labelled a trusts the person labelled b.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return -1.

Example 1:
Input: N = 3, trust = [[1,3],[2,3]]
Output: 3

Example 2:
Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1


Runtime: 3 ms, faster than 80.41% of Java online submissions for Find the Town Judge.
Memory Usage: 47 MB, less than 37.65% of Java online submissions for Find the Town Judge.

class Solution {
    public int findJudge(int N, int[][] trust) {
        int[] is_judge = new int[N];
        
        for(int i = 0; i < trust.length; i++){
            int person = trust[i][0];
            int trusted = trust[i][1];
            --is_judge[person-1];
            ++is_judge[trusted-1];
        }
        
        for(int x = 0; x < N; x++){
            if(is_judge[x] == N-1)
                return x+1;
        }
        
        return -1;
    }
}
